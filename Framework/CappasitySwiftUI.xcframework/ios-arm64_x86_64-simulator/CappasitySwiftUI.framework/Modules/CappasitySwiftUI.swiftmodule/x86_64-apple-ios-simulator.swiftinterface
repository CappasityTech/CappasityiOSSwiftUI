// swift-interface-format-version: 1.0
// swift-compiler-version: Apple Swift version 5.5 (swiftlang-1300.0.31.1 clang-1300.0.29.1)
// swift-module-flags: -target x86_64-apple-ios14.0-simulator -enable-objc-interop -enable-library-evolution -swift-version 5 -enforce-exclusivity=checked -O -module-name CappasitySwiftUI
@_exported import CappasitySwiftUI
import Combine
import CommonCrypto
import Foundation
import ImageIO
import Swift
import SwiftUI
import UIKit
import WebKit
import _Concurrency
public protocol CappasityModelDelegate : CappasitySwiftUI.CappasityDelegate {
  func capService(didReceive preview: UIKit.UIImage, userInfo: Swift.AnyObject?)
}
@_hasMissingDesignatedInitializers final public class CappasityModel : Combine.ObservableObject {
  final public var id: Swift.String {
    get
  }
  final public var title: Swift.String {
    get
  }
  final public var sku: Swift.String? {
    get
  }
  final public var access: CappasitySwiftUI.FileAccessType {
    get
  }
  weak final public var delegate: CappasitySwiftUI.CappasityModelDelegate?
  final public func getPreview(widthPx: Swift.UInt, heightPx: Swift.UInt, userInfo: Swift.AnyObject? = nil)
  final public func getPreview(widthPt: Swift.UInt, heightPt: Swift.UInt, userInfo: Swift.AnyObject? = nil)
  public typealias ObjectWillChangePublisher = Combine.ObservableObjectPublisher
  @objc deinit
}
@objc public enum CappasityZoomQuality : Swift.Int {
  case sdZoom = 1
  case hdZoom = 2
  public init?(rawValue: Swift.Int)
  public typealias RawValue = Swift.Int
  public var rawValue: Swift.Int {
    get
  }
}
@objc public enum CappasityAutoRotateDirection : Swift.Int {
  case counterClockwise = -1
  case clockwise = 1
  public init?(rawValue: Swift.Int)
  public typealias RawValue = Swift.Int
  public var rawValue: Swift.Int {
    get
  }
}
public enum CappasityModelViewAction {
  case idle
  case reload
  case stopLoading
  public static func == (a: CappasitySwiftUI.CappasityModelViewAction, b: CappasitySwiftUI.CappasityModelViewAction) -> Swift.Bool
  public func hash(into hasher: inout Swift.Hasher)
  public var hashValue: Swift.Int {
    get
  }
}
public protocol CappasityDelegate : AnyObject {
  func capService(didReceive error: CappasitySwiftUI.CappasityServiceError)
}
public protocol CappasityModelsListDelegate : CappasitySwiftUI.CappasityDelegate {
  func capService(didReceive models: [CappasitySwiftUI.CappasityModel])
}
final public class CappasityModelsList {
  public init(delegate: CappasitySwiftUI.CappasityModelsListDelegate)
  final public func nextModels(count: Swift.Int, offset: Swift.Int? = nil)
  @objc deinit
}
@objc public enum FileAccessType : Swift.Int {
  case publicAccess = 0
  case privateAccess = 1
  case unlistedAccess = 2
  public init?(rawValue: Swift.Int)
  public typealias RawValue = Swift.Int
  public var rawValue: Swift.Int {
    get
  }
}
public struct CappasityServiceError : Swift.Error, Swift.Identifiable {
  public var id: Swift.Int {
    get
  }
  public let code: Swift.Int
  public let localizedDescription: Swift.String
  public let debugDescription: Swift.String
  public typealias ID = Swift.Int
}
final public class CappasityModelReceiver {
  final public var modelPublisher: Combine.AnyPublisher<CappasitySwiftUI.CappasityModel, Swift.Never>
  final public var errorPublisher: Combine.AnyPublisher<CappasitySwiftUI.CappasityServiceError, Swift.Never>
  public init()
  final public func receiveModel(withId id: Swift.String)
  final public func receiveModel(withSku sku: Swift.String)
  final public func receiveModel(withLink link: Swift.String)
  @objc deinit
}
@_hasMissingDesignatedInitializers final public class CappasityService {
  public static func set(userAlias: Swift.String, completionHandler: ((Swift.Bool, CappasitySwiftUI.CappasityServiceError?) -> Swift.Void)? = nil)
  @objc deinit
}
public struct CappasityModelView : SwiftUI.View {
  public typealias SuccessCompletion = () -> Swift.Void
  public typealias FailureCompletion = (CappasitySwiftUI.CappasityServiceError) -> Swift.Void
  public var model: CappasitySwiftUI.CappasityModel
  @_Concurrency.MainActor(unsafe) public var body: some SwiftUI.View {
    get
  }
  public init(model: CappasitySwiftUI.CappasityModel, action: SwiftUI.Binding<CappasitySwiftUI.CappasityModelViewAction>, onSuccess: CappasitySwiftUI.CappasityModelView.SuccessCompletion? = nil, onFailure: CappasitySwiftUI.CappasityModelView.FailureCompletion? = nil)
  public func customize(controlsOffset: UIKit.UIOffset = UIOffset(horizontal: 0, vertical: 15), isAutoRotate: Swift.Bool? = nil, isAutorun: Swift.Bool? = nil, isLogoShown: Swift.Bool? = nil, autoRotateTime: Swift.Float? = nil, autoRotateDelay: Swift.Float? = nil, autoRotateDirection: CappasitySwiftUI.CappasityAutoRotateDirection? = nil, isAutoRotateOptionsHidden: Swift.Bool? = nil, isSettingsButtonHidden: Swift.Bool? = nil, isImageZoomEnabled: Swift.Bool? = nil, zoomQuality: CappasitySwiftUI.CappasityZoomQuality? = nil, isZoomOptionHidden: Swift.Bool? = nil, isHintHidden: Swift.Bool? = nil) -> some SwiftUI.View
  
  public typealias Body = @_opaqueReturnTypeOf("$s16CappasitySwiftUI0A9ModelViewV4bodyQrvp", 0) __
}
extension CappasitySwiftUI.CappasityZoomQuality : Swift.Equatable {}
extension CappasitySwiftUI.CappasityZoomQuality : Swift.Hashable {}
extension CappasitySwiftUI.CappasityZoomQuality : Swift.RawRepresentable {}
extension CappasitySwiftUI.CappasityAutoRotateDirection : Swift.Equatable {}
extension CappasitySwiftUI.CappasityAutoRotateDirection : Swift.Hashable {}
extension CappasitySwiftUI.CappasityAutoRotateDirection : Swift.RawRepresentable {}
extension CappasitySwiftUI.CappasityModelViewAction : Swift.Equatable {}
extension CappasitySwiftUI.CappasityModelViewAction : Swift.Hashable {}
extension CappasitySwiftUI.FileAccessType : Swift.Equatable {}
extension CappasitySwiftUI.FileAccessType : Swift.Hashable {}
extension CappasitySwiftUI.FileAccessType : Swift.RawRepresentable {}
